generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionType {
  can
  cannot
}

enum PermissionAction {
  create
  read
  update
  delete
  manage
}

enum MenuTypes {
  separator
  link
  dropdown
}

model User {
  id              Int               @id @default(autoincrement()) @map("id")
  email           String            @unique @map("email")
  password        String            @map("password")
  name            String            @map("name")
  roles           String            @default("user") @map("roles")
  isActive        Boolean           @default(true) @map("is_active")
  isDeleted       Boolean           @default(false) @map("is_deleted")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  profileId       Int               @map("profile_id")
  Profile         Profile           @relation(fields: [profileId], references: [id])
  comments        Comment[]         @relation("CommentAuthor")
  reactions       PostReaction[]
  bookmarks       Bookmark[]
  following       FollowAuthor[]    @relation("BlogUserFollowing")
  followers       FollowAuthor[]    @relation("BlogUserFollowers")
  Post            Post[]            @relation("PostAuthor")
  UserPosts       Post[]            @relation("PostUser")
  Comment         Comment[]         @relation("CommentUser")
  CommentReaction CommentReaction[]
  PostEditHistory PostEditHistory[]
  PostView        PostView[]

  @@index([isDeleted])
  @@map("users")
}

model Profile {
  id               Int                @id @default(autoincrement()) @map("id")
  name             String             @unique @map("name")
  isActive         Boolean            @default(true) @map("is_active")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  ProfileMenuItems ProfileMenuItems[]
  Users            User[]
  Permissions      Permission[]       @relation("ProfilePermissions")

  @@index([isActive])
  @@map("profiles")
}

model Permission {
  id         Int              @id @default(autoincrement()) @map("id")
  name       String           @unique @map("name")
  action     PermissionAction @default(read) @map("action")
  subject    String           @map("subject")
  type       PermissionType   @default(can) @map("type")
  conditions Json?            @map("conditions")
  Profiles   Profile[]        @relation("ProfilePermissions")

  @@map("permissions")
}

model ProfileMenuItems {
  id         Int       @id @default(autoincrement()) @map("id")
  profileId  Int       @map("profile_id")
  menuItemId Int       @map("menu_item_id")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  menuItem   MenuItems @relation(fields: [menuItemId], references: [id])
  Profile    Profile   @relation(fields: [profileId], references: [id])

  @@unique([profileId, menuItemId])
  @@map("profile_menu_items")
}

model MenuItems {
  id               Int                @id @default(autoincrement()) @map("id")
  title            String             @map("title")
  order            Int                @map("order_index")
  caption          String?            @map("caption")
  link             String?            @map("link")
  type             MenuTypes          @default(link) @map("type")
  icon             String?            @map("icon")
  isActive         Boolean            @default(true) @map("is_active")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  parentId         Int?               @map("parent_id")
  Parent           MenuItems?         @relation("MenuHierarchy", fields: [parentId], references: [id])
  Children         MenuItems[]        @relation("MenuHierarchy")
  ProfileMenuItems ProfileMenuItems[]

  @@map("menu_items")
}

// ===== Enums del blog =====
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  VISIBLE
  HIDDEN
  DELETED
  PENDING
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  SAD
  ANGRY
}

// ===== Taxonom√≠a =====
model Category {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  slug        String   @unique @map("slug")
  description String?  @map("description")
  parentId    Int?     @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  parent   Category?      @relation("BlogCategoryHierarchy", fields: [parentId], references: [id])
  children Category[]     @relation("BlogCategoryHierarchy")
  posts    PostCategory[]

  @@index([parentId])
  @@map("blog_categories")
}

model Tag {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @unique @map("name")
  slug      String   @unique @map("slug")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  posts PostTag[]

  @@map("blog_tags")
}

// ===== Posts =====
model Post {
  id            Int        @id @default(autoincrement()) @map("id")
  authorId      Int        @map("author_id")
  title         String     @map("title")
  slug          String     @unique @map("slug")
  excerpt       String?    @map("excerpt") @db.Text
  contentMd     String?    @map("content_md") @db.Text
  contentJson   Json?      @map("content_json")
  coverImageUrl String?    @map("cover_image_url")
  status        PostStatus @default(DRAFT) @map("status")
  isPinned      Boolean    @default(false) @map("is_pinned")
  publishedAt   DateTime?  @map("published_at")
  scheduledAt   DateTime?  @map("scheduled_at")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  deletedAt     DateTime?  @map("deleted_at")

  // contadores denormalizados
  viewCount      Int               @default(0) @map("view_count")
  likeCount      Int               @default(0) @map("like_count")
  commentCount   Int               @default(0) @map("comment_count")
  readingTimeMin Int               @default(0) @map("reading_time_min")
  author         User              @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  categories     PostCategory[]
  tags           PostTag[]
  comments       Comment[]
  reactions      PostReaction[]
  bookmarks      Bookmark[]
  edits          PostEditHistory[]
  User           User?             @relation("PostUser", fields: [userId], references: [id])
  userId         Int?
  PostView       PostView[]

  @@index([authorId])
  @@index([status, publishedAt])
  @@index([isPinned])
  @@map("blog_posts")
}

model PostCategory {
  postId     Int      @map("post_id")
  categoryId Int      @map("category_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@index([categoryId])
  @@map("blog_post_categories")
}

model PostTag {
  postId  Int      @map("post_id")
  tagId   Int      @map("tag_id")
  addedAt DateTime @default(now()) @map("added_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([tagId])
  @@map("blog_post_tags")
}

// ===== Comentarios (anidados) =====
model Comment {
  id        Int           @id @default(autoincrement()) @map("id")
  postId    Int           @map("post_id")
  authorId  Int           @map("author_id")
  parentId  Int?          @map("parent_id")
  content   String        @map("content") @db.Text
  status    CommentStatus @default(VISIBLE) @map("status")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")

  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User              @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?          @relation("BlogCommentHierarchy", fields: [parentId], references: [id])
  children  Comment[]         @relation("BlogCommentHierarchy")
  reactions CommentReaction[]
  User      User?             @relation("CommentUser", fields: [userId], references: [id])
  userId    Int?

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([status])
  @@map("blog_comments")
}

// ===== Reacciones =====
model PostReaction {
  id        Int          @id @default(autoincrement()) @map("id")
  postId    Int          @map("post_id")
  userId    Int          @map("user_id")
  type      ReactionType @default(LIKE) @map("type")
  createdAt DateTime     @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@index([userId])
  @@map("blog_post_reactions")
}

model CommentReaction {
  id        Int          @id @default(autoincrement()) @map("id")
  commentId Int          @map("comment_id")
  userId    Int          @map("user_id")
  type      ReactionType @default(LIKE) @map("type")
  createdAt DateTime     @default(now()) @map("created_at")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@index([userId])
  @@map("blog_comment_reactions")
}

// ===== Guardados =====
model Bookmark {
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId])
  @@map("blog_bookmarks")
}

// ===== Seguir autores =====
model FollowAuthor {
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("BlogUserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("BlogUserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
  @@map("blog_follow_authors")
}

// ===== Historial de ediciones =====
model PostEditHistory {
  id          Int      @id @default(autoincrement()) @map("id")
  postId      Int      @map("post_id")
  editorId    Int?     @map("editor_id")
  title       String?  @map("title")
  excerpt     String?  @map("excerpt") @db.Text
  contentMd   String?  @map("content_md") @db.Text
  contentJson Json?    @map("content_json")
  editedAt    DateTime @default(now()) @map("edited_at")
  note        String?  @map("note") @db.Text

  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  editor User? @relation(fields: [editorId], references: [id], onDelete: SetNull)

  @@index([postId])
  @@index([editorId])
  @@map("blog_post_edit_history")
}

// ===== M√©trica de vistas =====
model PostView {
  id        Int      @id @default(autoincrement()) @map("id")
  postId    Int      @map("post_id")
  userId    Int?     @map("user_id")
  ipHash    String?  @map("ip_hash")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([postId])
  @@index([userId])
  @@map("blog_post_views")
}
