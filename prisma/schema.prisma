generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionType {
  can
  cannot
}

enum PermissionAction {
  create
  read
  update
  delete
  manage
}

enum MenuTypes {
  separator
  link
  dropdown
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  email     String   @unique @map("email")
  password  String   @map("password")
  name      String   @map("name")
  roles     String   @default("user") @map("roles")
  discordId String? @unique // ID Ãºnico de Discord, opcional
  avatar    String? // URL del avatar de Discord, opcional
  isActive  Boolean  @default(true) @map("is_active")
  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profileId Int      @map("profile_id")
  Profile   Profile  @relation(fields: [profileId], references: [id])

  @@index([isDeleted])
  @@map("users")
}

model Profile {
  id               Int                @id @default(autoincrement()) @map("id")
  name             String             @unique @map("name")
  isActive         Boolean            @default(true) @map("is_active")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  ProfileMenuItems ProfileMenuItems[]
  Users            User[]
  Permissions      Permission[]       @relation("ProfilePermissions")

  @@index([isActive])
  @@map("profiles")
}

model Permission {
  id         Int              @id @default(autoincrement()) @map("id")
  name       String           @unique @map("name")
  action     PermissionAction @default(read) @map("action")
  subject    String           @map("subject")
  type       PermissionType   @default(can) @map("type")
  conditions Json?            @map("conditions")
  Profiles   Profile[]        @relation("ProfilePermissions")

  @@map("permissions")
}

model ProfileMenuItems {
  id         Int       @id @default(autoincrement()) @map("id")
  profileId  Int       @map("profile_id")
  menuItemId Int       @map("menu_item_id")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  menuItem   MenuItems @relation(fields: [menuItemId], references: [id])
  Profile    Profile   @relation(fields: [profileId], references: [id])

  @@unique([profileId, menuItemId])
  @@map("profile_menu_items")
}

model MenuItems {
  id               Int                @id @default(autoincrement()) @map("id")
  title            String             @map("title")
  order            Int                @map("order_index")
  caption          String?            @map("caption")
  link             String?            @map("link")
  type             MenuTypes          @default(link) @map("type")
  icon             String?            @map("icon")
  isActive         Boolean            @default(true) @map("is_active")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  parentId         Int?               @map("parent_id")
  Parent           MenuItems?         @relation("MenuHierarchy", fields: [parentId], references: [id])
  Children         MenuItems[]        @relation("MenuHierarchy")
  ProfileMenuItems ProfileMenuItems[]

  @@map("menu_items")
}
